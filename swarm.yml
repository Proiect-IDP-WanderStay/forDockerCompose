version: '3.8'

services:
  business:
    image: robertzz/business_logic:latest
    command: python manage.py run -h 0.0.0.0 --port 7777
    deploy:
      replicas: 2
      placement:
          max_replicas_per_node: 1
      update_config:
          order: start-first
      rollback_config:
          order: stop-first
    environment:
      - FLASK_DEBUG=1
      - FLASK_APP=project/__init__.py
    networks:
      - network-BusinessLogic-DatabaseAPI
      - internal

  io_api:
    image: robertzz/idp_project_database_api:latest 
    command: python manage.py run -h 0.0.0.0 --port 4000
    deploy:
      replicas: 2
      placement:
          max_replicas_per_node: 1
      update_config:
          order: start-first
      rollback_config:
          order: stop-first
    depends_on:
      - db
    environment:
      - FLASK_DEBUG=1
      - DATABASE_URL=postgresql://hello_flask:hello_flask@db:5432/hello_flask_dev
      - SQL_HOST=db
      - SQL_PORT=5432
      - DATABASE=postgres
      - FLASK_APP=project/__init__.py
    networks:
      - network-database-UserAPI-DatabaseAPI
      - network-BusinessLogic-DatabaseAPI
      - internal
      - monitoring

  user:
    image: robertzz/idp_project_user_api:latest
    command: python manage.py run -h 0.0.0.0
    environment:
      - FLASK_DEBUG=1
      - DATABASE_URL=postgresql://hello_flask:hello_flask@db:5432/hello_flask_dev
      - SQL_HOST=db
      - SQL_PORT=5432
      - DATABASE=postgres
      - FLASK_APP=user/__init__.py
      - SECRET_KEY="small_secret"
    depends_on:
      - db
    networks:
      - network-database-UserAPI-DatabaseAPI
      - network-UserLogic-UserAPI
      - internal
    deploy:
      replicas: 2
      placement:
          max_replicas_per_node: 1
      update_config:
          order: start-first
      rollback_config:
          order: stop-first

  
  db:
    image: postgres:13
    ports:
      - "5432:5432"
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=hello_flask
      - POSTGRES_PASSWORD=hello_flask
      - POSTGRES_DB=hello_flask_dev
    deploy:
      placement:
          constraints:
              - "node.role==manager"
    networks:
      - network-database-admin
      - network-database-UserAPI-DatabaseAPI

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=root
    ports:
      - "5050:80"
    networks:
      - network-database-admin
      - internal

  kong:
    image: robertzz/kong_dbless:latest
    environment:
      KONG_DATABASE: 'off'
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - "80:8000"
      - "443:8443"
      - "8001:8001"
      - "8444:8444"
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    networks:
      - internal

  agent:
    image: portainer/agent:2.11.1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - agent_network
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]

  # admin
  # pizzatime
  portainer:
    image: portainer/portainer-ce:2.11.1
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    ports:
      - "9443:9443"
      - "9000:9000"
      - "8100:8000"
    volumes:
      - portainer_data:/data
    networks:
      - agent_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]

  grafana:
    image: grafana/grafana
    volumes:
        - grafana-volume:/var/lib/grafana
    ports:
        - 3000:3000
    deploy:
        placement:
            constraints: [node.role == manager]
    networks:
        - visualizing

  prometheus:
    image: robertzz/idp_project_prometheus
    ports:
        - 9090:9090
    networks:
        - visualizing
        - monitoring

  node_exporter:
    image: prom/node-exporter
    deploy:
        mode: global
    volumes:
        - /proc:/host/proc:ro
        - /sys:/host/sys:ro
        - /:/rootfs:ro
    command:
        - '--path.procfs=/host/proc'
        - '--path.rootfs=/rootfs'
        - '--path.sysfs=/host/sys'
        - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
        - 9100:9100
    networks:
        - monitoring

  
  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    deploy:
        mode: global
    volumes:
        - /:/rootfs:ro
        - /var/run:/var/run:ro
        - /sys:/sys:ro
        - /var/lib/docker/:/var/lib/docker:ro
        - /dev/disk:/dev/disk/:ro
    ports:
        - 8080:8080
    networks:
        - monitoring


volumes:
  db_data:
  portainer_data:
  grafana-volume:

networks:
  network-database-admin:
  network-database-UserAPI-DatabaseAPI:
  network-BusinessLogic-DatabaseAPI:
  network-UserLogic-UserAPI:
  internal:
  monitoring:
  logging:
  visualizing:
  agent_network:
    driver: overlay
    attachable: true


